{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["const board = document.getElementById(\"board\") as HTMLDivElement;\r\nconst statusText = document.getElementById(\"status\") as HTMLParagraphElement;\r\nconst resetButton = document.getElementById(\"reset\") as HTMLButtonElement;\r\nconst cells = Array.from(document.getElementsByClassName(\"cell\") as HTMLCollectionOf<HTMLButtonElement>);\r\n\r\n\r\nlet currentPlayer: \"X\" | \"O\" = \"X\"\r\nlet gameBoard: (string | null)[] = Array(9).fill(null);\r\nlet gameOver = false;\r\n\r\ncells.forEach((cell, index) => {\r\n    cell.addEventListener(\"mouseenter\", () => {\r\n        if (!gameBoard[index]) {\r\n            cell.textContent = currentPlayer;\r\n            cell.style.opacity = \"0.5\";\r\n        }\r\n    });\r\n\r\n    cell.addEventListener(\"mouseleave\", () => {\r\n       if (!gameBoard[index]) {\r\n           cell.textContent = \"\";\r\n           cell.style.opacity = \"1\";\r\n       }\r\n    });\r\n\r\n    cell.addEventListener(\"click\", () => {\r\n        click(index);\r\n        cell.style.opacity = \"0.5\";\r\n    });\r\n});\r\n\r\n\r\nconst click = (index: number) => {\r\n    if (gameOver || gameBoard[index] !== null) return;\r\n\r\n    gameBoard[index] = currentPlayer;\r\n    cells[index].textContent = currentPlayer;\r\n\r\n    const winner = playerWinner();\r\n    if (winner === \"X\" || winner === \"O\") {\r\n        statusText.textContent = `Player ${winner} wins!`;\r\n        gameOver = true;\r\n        alert(`Player ${winner} wins!`)\r\n        saveGameState();\r\n        return;\r\n    } else if (winner === \"Draw\") {\r\n        statusText.textContent = \"Its a Draw!\";\r\n        gameOver = true;\r\n        alert(\"It's a Draw!\");\r\n        saveGameState();\r\n        return;\r\n    }\r\n\r\n    currentPlayer = currentPlayer === \"X\" ? \"O\": \"X\";\r\n    statusText.textContent = `Player ${currentPlayer} Turn`;\r\n\r\n    saveGameState();\r\n};\r\n\r\n\r\nresetButton.addEventListener(\"click\", () => {\r\n    gameBoard.fill(null);\r\n    cells.forEach(cell => {\r\n        cell.textContent = \"\";\r\n        cell.style.opacity = \"1\";\r\n    });\r\n\r\n    currentPlayer = \"X\";\r\n    statusText.textContent = \"Player X turn\";\r\n    gameOver = false;\r\n\r\n    localStorage.removeItem(\"tictactoe_board\");\r\n    localStorage.removeItem(\"tictactoe_player\");\r\n    localStorage.removeItem(\"tictactoe_status\");\r\n    localStorage.removeItem(\"tictactoe_opacity\");\r\n});\r\n\r\n\r\nconst playerWinner = () => {\r\n    const winPatterns = [\r\n        [0, 1, 2], [3, 4, 5], [6, 7, 8],\r\n        [0, 3, 6], [1, 4, 7], [2, 5, 8],\r\n        [0, 4, 8], [2, 4, 6]\r\n    ];\r\n\r\n    for (const pattern of winPatterns) {\r\n        const [a,b,c] = pattern;\r\n        if (gameBoard[a] && gameBoard[a] === gameBoard[b] && gameBoard[a] === gameBoard[c]) {\r\n            return gameBoard[a];\r\n        }\r\n    }\r\n\r\n    if (gameBoard.indexOf(null) === -1) {\r\n        return \"Draw\";\r\n    }\r\n\r\n\r\n    return null;\r\n};\r\n\r\n\r\nconst saveGameState = () => {\r\n    localStorage.setItem(\"tictactoe_board\", JSON.stringify(gameBoard));\r\n    localStorage.setItem(\"tictactoe_player\", currentPlayer);\r\n    localStorage.setItem(\"tictactoe_status\", statusText.textContent || \"\");\r\n\r\n    const opacityState = cells.map(cell => cell.style.opacity);\r\n    localStorage.setItem(\"tictactoe_opacity\", JSON.stringify(opacityState));\r\n};\r\n\r\n\r\nconst loadGameState = () => {\r\n    const savedBoard = localStorage.getItem(\"tictactoe_board\");\r\n    const savedPlayer = localStorage.getItem(\"tictactoe_player\");\r\n    const savedStatus = localStorage.getItem(\"tictactoe_status\");\r\n    const savedOpacity = localStorage.getItem(\"tictactoe_opacity\");\r\n\r\n    if (savedBoard) {\r\n        gameBoard = JSON.parse(savedBoard);\r\n        gameBoard.forEach((mark, index) => {\r\n            cells[index].textContent = mark || \"\";\r\n        })\r\n    }\r\n\r\n    if (savedPlayer) {\r\n        currentPlayer = savedPlayer as \"X\" | \"O\";\r\n    }\r\n\r\n    if (savedStatus) {\r\n        statusText.textContent = savedStatus;\r\n    }\r\n\r\n    if (savedOpacity) {\r\n        const opacityValues = JSON.parse(savedOpacity);\r\n        cells.forEach((cell, index) => {\r\n            cell.style.opacity = opacityValues[index];\r\n        });\r\n    }\r\n};\r\n\r\nloadGameState();"],
  "mappings": "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",
  "names": []
}
